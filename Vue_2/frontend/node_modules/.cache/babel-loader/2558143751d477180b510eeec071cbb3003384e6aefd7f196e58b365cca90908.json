{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      loading: true,\n      // 加载状态\n      item: null,\n      // 商品详情数据\n      isLogin: false,\n      // 是否登录\n      currentUserId: null,\n      // 当前登录用户ID\n      isFavorite: false // 是否已收藏\n    };\n  },\n  created() {\n    // 页面加载时获取商品详情\n    this.getItemDetail();\n    // 检查登录状态\n    this.checkLoginStatus();\n  },\n  methods: {\n    // 获取商品详情\n    async getItemDetail() {\n      const itemId = this.$route.params.id; // 从路由参数中获取商品ID\n      try {\n        const response = await axios.get(`/api/items/${itemId}`);\n        if (response.data.ok) {\n          this.item = response.data.data;\n          // 检查是否已收藏\n          this.checkFavoriteStatus();\n        } else {\n          alert(response.data.message || '获取商品失败');\n        }\n      } catch (error) {\n        console.error('获取商品详情失败:', error);\n        alert('网络错误，请稍后再试');\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 检查登录状态\n    checkLoginStatus() {\n      const token = localStorage.getItem('access_token');\n      const userInfo = localStorage.getItem('user_info');\n      if (token && userInfo) {\n        this.isLogin = true;\n        this.currentUserId = JSON.parse(userInfo).id;\n      }\n    },\n    // 检查是否已收藏\n    async checkFavoriteStatus() {\n      if (!this.isLogin || !this.item) return;\n      try {\n        const response = await axios.get(`/api/favorites/check?item_id=${this.item.id}`);\n        this.isFavorite = response.data.data.is_favorite;\n      } catch (error) {\n        console.error('检查收藏状态失败:', error);\n      }\n    },\n    // 切换收藏状态\n    async toggleFavorite() {\n      try {\n        if (this.isFavorite) {\n          // 取消收藏\n          await axios.delete(`/api/favorites/${this.item.id}`);\n          this.isFavorite = false;\n          alert('取消收藏成功');\n        } else {\n          // 收藏商品\n          await axios.post('/api/favorites', {\n            item_id: this.item.id\n          });\n          this.isFavorite = true;\n          alert('收藏成功');\n        }\n      } catch (error) {\n        console.error('切换收藏状态失败:', error);\n        alert('操作失败，请稍后再试');\n      }\n    },\n    // 跳转到聊天页面\n    goToChat() {\n      this.$router.push({\n        name: 'ChatDetail',\n        params: {\n          otherUserId: this.item.seller.id,\n          itemId: this.item.id\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","loading","item","isLogin","currentUserId","isFavorite","created","getItemDetail","checkLoginStatus","methods","itemId","$route","params","id","response","get","ok","checkFavoriteStatus","alert","message","error","console","token","localStorage","getItem","userInfo","JSON","parse","is_favorite","toggleFavorite","delete","post","item_id","goToChat","$router","push","name","otherUserId","seller"],"sources":["D:\\21626\\MyFiles\\files\\2025fall\\SE\\Vue_2\\frontend\\src\\views\\ItemDetail.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <!-- 加载中提示 -->\n    <div v-if=\"loading\" class=\"text-center py-5\">\n      <div class=\"spinner-border text-primary\" role=\"status\">\n        <span class=\"visually-hidden\">Loading...</span>\n      </div>\n    </div>\n\n    <!-- 商品不存在提示 -->\n    <div v-if=\"!loading && !item\" class=\"text-center py-5\">\n      <h3>商品不存在或已被删除</h3>\n      <router-link to=\"/\" class=\"btn btn-primary mt-3\">返回首页</router-link>\n    </div>\n\n    <!-- 商品详情 -->\n    <div v-if=\"!loading && item\" class=\"row mt-4\">\n      <!-- 商品图片 -->\n      <div class=\"col-md-6\">\n        <img \n          :src=\"item.imagePath ? `/images/${item.imagePath}` : '/images/default.jpg'\" \n          class=\"img-fluid rounded\" \n          :alt=\"item.title\"\n        >\n      </div>\n\n      <!-- 商品信息 -->\n      <div class=\"col-md-6\">\n        <h2 class=\"mb-3\">{{ item.title }}</h2>\n        <p class=\"text-danger fs-3 mb-4\">¥{{ item.price }}</p>\n\n        <div class=\"card mb-4\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">商品描述</h5>\n            <p class=\"card-text\">{{ item.description }}</p>\n            <hr>\n            <p class=\"card-text\">\n              <small class=\"text-muted\">发布时间：{{ item.createdAt }}</small>\n            </p>\n            <p class=\"card-text\">\n              <small class=\"text-muted\">状态：{{ item.status === 'available' ? '可交易' : '已售出' }}</small>\n            </p>\n          </div>\n        </div>\n\n        <!-- 卖家信息 -->\n        <div class=\"card mb-4\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">卖家信息</h5>\n            <p class=\"card-text\">用户名：{{ item.seller.username }}</p>\n            <!-- 登录后显示聊天按钮 -->\n            <button \n              class=\"btn btn-primary me-2\" \n              @click=\"goToChat\"\n              v-if=\"isLogin && item.seller.id !== currentUserId\"\n            >\n              联系卖家\n            </button>\n          </div>\n        </div>\n\n        <!-- 收藏按钮（登录后显示） -->\n        <button \n          class=\"btn btn-outline-primary\" \n          @click=\"toggleFavorite\"\n          v-if=\"isLogin\"\n        >\n          <i class=\"bi\" :class=\"isFavorite ? 'bi-heart-fill text-danger' : 'bi-heart'\"></i>\n          {{ isFavorite ? '取消收藏' : '收藏商品' }}\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\n\nexport default {\n  data() {\n    return {\n      loading: true,       // 加载状态\n      item: null,          // 商品详情数据\n      isLogin: false,      // 是否登录\n      currentUserId: null, // 当前登录用户ID\n      isFavorite: false    // 是否已收藏\n    }\n  },\n  created() {\n    // 页面加载时获取商品详情\n    this.getItemDetail();\n    // 检查登录状态\n    this.checkLoginStatus();\n  },\n  methods: {\n    // 获取商品详情\n    async getItemDetail() {\n      const itemId = this.$route.params.id; // 从路由参数中获取商品ID\n      try {\n        const response = await axios.get(`/api/items/${itemId}`);\n        if (response.data.ok) {\n          this.item = response.data.data;\n          // 检查是否已收藏\n          this.checkFavoriteStatus();\n        } else {\n          alert(response.data.message || '获取商品失败');\n        }\n      } catch (error) {\n        console.error('获取商品详情失败:', error);\n        alert('网络错误，请稍后再试');\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    // 检查登录状态\n    checkLoginStatus() {\n      const token = localStorage.getItem('access_token');\n      const userInfo = localStorage.getItem('user_info');\n      if (token && userInfo) {\n        this.isLogin = true;\n        this.currentUserId = JSON.parse(userInfo).id;\n      }\n    },\n\n    // 检查是否已收藏\n    async checkFavoriteStatus() {\n      if (!this.isLogin || !this.item) return;\n      try {\n        const response = await axios.get(`/api/favorites/check?item_id=${this.item.id}`);\n        this.isFavorite = response.data.data.is_favorite;\n      } catch (error) {\n        console.error('检查收藏状态失败:', error);\n      }\n    },\n\n    // 切换收藏状态\n    async toggleFavorite() {\n      try {\n        if (this.isFavorite) {\n          // 取消收藏\n          await axios.delete(`/api/favorites/${this.item.id}`);\n          this.isFavorite = false;\n          alert('取消收藏成功');\n        } else {\n          // 收藏商品\n          await axios.post('/api/favorites', { item_id: this.item.id });\n          this.isFavorite = true;\n          alert('收藏成功');\n        }\n      } catch (error) {\n        console.error('切换收藏状态失败:', error);\n        alert('操作失败，请稍后再试');\n      }\n    },\n\n    // 跳转到聊天页面\n    goToChat() {\n      this.$router.push({\n        name: 'ChatDetail',\n        params: {\n          otherUserId: this.item.seller.id,\n          itemId: this.item.id\n        }\n      });\n    }\n  }\n}\n</script>\n\n<style>\n/* 商品详情页图片样式 */\n.img-fluid {\n  max-height: 500px;\n  object-fit: contain;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}