{"ast":null,"code":"// 导入axios（必须添加，否则无法发送请求）\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      username: '',\n      password: ''\n    };\n  },\n  methods: {\n    async handleLogin() {\n      // 添加async关键字，支持await\n      try {\n        // 调用后端登录接口（与api.md匹配的地址）\n        const response = await axios.post('/api/auth/login', {\n          username: this.username,\n          password: this.password\n        });\n\n        // 处理登录成功（根据api.md的响应格式）\n        if (response.data.ok) {\n          // 保存后端返回的token和用户信息到localStorage\n          localStorage.setItem('access_token', response.data.data.access_token);\n          localStorage.setItem('user_info', JSON.stringify(response.data.data.user));\n\n          // 登录成功后跳转到首页\n          this.$router.push('/');\n          // 刷新页面让全局状态生效（可选）\n          window.location.reload();\n        } else {\n          // 后端返回失败信息（如用户名密码错误）\n          alert(response.data.error?.message || '登录失败');\n        }\n      } catch (error) {\n        // 处理网络错误或服务器异常\n        console.error('登录请求失败:', error);\n        if (error.response) {\n          // 后端返回的错误（如401 Unauthorized）\n          alert(error.response.data.error?.message || '用户名或密码错误');\n        } else {\n          alert('网络错误，请检查后端是否启动');\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","username","password","methods","handleLogin","response","post","ok","localStorage","setItem","access_token","JSON","stringify","user","$router","push","window","location","reload","alert","error","message","console"],"sources":["D:\\21626\\MyFiles\\files\\2025fall\\SE\\Vue_2\\frontend\\src\\views\\Login.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div class=\"row justify-content-center\">\n      <div class=\"col-md-6\">\n        <div class=\"card\">\n          <div class=\"card-header bg-primary text-white\">\n            <h3 class=\"text-center\">用户登录</h3>\n          </div>\n          <div class=\"card-body\">\n            <form @submit.prevent=\"handleLogin\">\n              <div class=\"mb-3\">\n                <label for=\"username\" class=\"form-label\">用户名</label>\n                <input \n                  type=\"text\" \n                  class=\"form-control\" \n                  id=\"username\" \n                  v-model=\"username\" \n                  required\n                >\n              </div>\n              <div class=\"mb-3\">\n                <label for=\"password\" class=\"form-label\">密码</label>\n                <input \n                  type=\"password\" \n                  class=\"form-control\" \n                  id=\"password\" \n                  v-model=\"password\" \n                  required\n                >\n              </div>\n              <button type=\"submit\" class=\"btn btn-primary w-100\">登录</button>\n            </form>\n            <p class=\"text-center mt-3\">\n              还没有账号？<router-link to=\"/register\">立即注册</router-link>\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n// 导入axios（必须添加，否则无法发送请求）\nimport axios from 'axios'\n\nexport default {\n  data() {\n    return {\n      username: '',\n      password: ''\n    }\n  },\n  methods: {\n    async handleLogin() { // 添加async关键字，支持await\n      try {\n        // 调用后端登录接口（与api.md匹配的地址）\n        const response = await axios.post('/api/auth/login', {\n          username: this.username,\n          password: this.password\n        });\n\n        // 处理登录成功（根据api.md的响应格式）\n        if (response.data.ok) {\n          // 保存后端返回的token和用户信息到localStorage\n          localStorage.setItem('access_token', response.data.data.access_token);\n          localStorage.setItem('user_info', JSON.stringify(response.data.data.user));\n          \n          // 登录成功后跳转到首页\n          this.$router.push('/');\n          // 刷新页面让全局状态生效（可选）\n          window.location.reload();\n        } else {\n          // 后端返回失败信息（如用户名密码错误）\n          alert(response.data.error?.message || '登录失败');\n        }\n      } catch (error) {\n        // 处理网络错误或服务器异常\n        console.error('登录请求失败:', error);\n        if (error.response) {\n          // 后端返回的错误（如401 Unauthorized）\n          alert(error.response.data.error?.message || '用户名或密码错误');\n        } else {\n          alert('网络错误，请检查后端是否启动');\n        }\n      }\n    }\n  }\n}\n</script>"],"mappings":"AA2CA;AACA,OAAOA,KAAI,MAAO,OAAM;AAExB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,WAAWA,CAAA,EAAG;MAAE;MACpB,IAAI;QACF;QACA,MAAMC,QAAO,GAAI,MAAMN,KAAK,CAACO,IAAI,CAAC,iBAAiB,EAAE;UACnDL,QAAQ,EAAE,IAAI,CAACA,QAAQ;UACvBC,QAAQ,EAAE,IAAI,CAACA;QACjB,CAAC,CAAC;;QAEF;QACA,IAAIG,QAAQ,CAACL,IAAI,CAACO,EAAE,EAAE;UACpB;UACAC,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEJ,QAAQ,CAACL,IAAI,CAACA,IAAI,CAACU,YAAY,CAAC;UACrEF,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEE,IAAI,CAACC,SAAS,CAACP,QAAQ,CAACL,IAAI,CAACA,IAAI,CAACa,IAAI,CAAC,CAAC;;UAE1E;UACA,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC;UACtB;UACAC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;QAC1B,OAAO;UACL;UACAC,KAAK,CAACd,QAAQ,CAACL,IAAI,CAACoB,KAAK,EAAEC,OAAM,IAAK,MAAM,CAAC;QAC/C;MACF,EAAE,OAAOD,KAAK,EAAE;QACd;QACAE,OAAO,CAACF,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;QAC/B,IAAIA,KAAK,CAACf,QAAQ,EAAE;UAClB;UACAc,KAAK,CAACC,KAAK,CAACf,QAAQ,CAACL,IAAI,CAACoB,KAAK,EAAEC,OAAM,IAAK,UAAU,CAAC;QACzD,OAAO;UACLF,KAAK,CAAC,gBAAgB,CAAC;QACzB;MACF;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}