{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      // 路由参数\n      otherUserId: this.$route.params.otherUserId,\n      // 聊天对象ID\n      itemId: this.$route.params.itemId,\n      // 关联商品ID\n\n      // 数据\n      messages: [],\n      // 消息列表（原始数据）\n      messageContent: '',\n      // 输入的消息内容\n      currentUserId: null,\n      // 当前登录用户ID\n      currentUserInfo: {},\n      // 当前用户信息\n      otherUserInfo: {},\n      // 聊天对象信息\n      relatedItem: {},\n      // 关联商品信息\n\n      // 状态\n      loading: true,\n      sending: false // 发送中状态\n    };\n  },\n  computed: {\n    // 计算属性：过滤对方发送的消息\n    otherMessages() {\n      return this.messages.filter(msg => msg.sender_id !== this.currentUserId);\n    },\n    // 计算属性：过滤自己发送的消息\n    myMessages() {\n      return this.messages.filter(msg => msg.sender_id === this.currentUserId);\n    }\n  },\n  created() {\n    // 初始化数据\n    this.initUserInfo();\n    this.getRelatedItem();\n    this.getHistoryMessages();\n\n    // 模拟实时消息监听（实际项目中可用WebSocket）\n    this.setupMessageListener();\n  },\n  methods: {\n    // 初始化用户信息\n    initUserInfo() {\n      const userInfoStr = localStorage.getItem('user_info');\n      if (userInfoStr) {\n        this.currentUserInfo = JSON.parse(userInfoStr);\n        this.currentUserId = this.currentUserInfo.id;\n      }\n\n      // 临时模拟聊天对象信息（实际应从接口获取）\n      this.otherUserInfo = {\n        username: `用户${this.otherUserId}` // 模拟用户名\n      };\n    },\n    // 获取关联商品信息\n    async getRelatedItem() {\n      try {\n        const response = await axios.get(`/api/items/${this.itemId}`);\n        if (response.data.ok) {\n          this.relatedItem = response.data.data;\n        }\n      } catch (error) {\n        console.error('获取关联商品失败:', error);\n        this.relatedItem = {\n          title: `商品${this.itemId}`\n        }; // 模拟商品名\n      }\n    },\n    // 获取历史消息\n    async getHistoryMessages() {\n      try {\n        const response = await axios.get(`/api/messages/history`, {\n          params: {\n            other_user_id: this.otherUserId,\n            item_id: this.itemId\n          }\n        });\n        if (response.data.ok) {\n          this.messages = response.data.data;\n        } else {\n          alert('获取历史消息失败');\n        }\n      } catch (error) {\n        console.error('获取历史消息失败:', error);\n        // 模拟历史消息\n        this.messages = [{\n          id: 1,\n          sender_id: this.otherUserId,\n          content: '你好，这个商品还在吗？',\n          created_at: '2025-10-28 10:30:00'\n        }, {\n          id: 2,\n          sender_id: this.currentUserId,\n          content: '还在的，请问有兴趣吗？',\n          created_at: '2025-10-28 10:35:00'\n        }];\n      } finally {\n        this.loading = false;\n        this.scrollToBottom(); // 滚动到最新消息\n      }\n    },\n    // 发送消息\n    async sendMessage() {\n      const content = this.messageContent.trim();\n      if (!content) return;\n      this.sending = true;\n      try {\n        // 调用后端发送消息接口\n        const response = await axios.post('/api/messages/send', {\n          other_user_id: this.otherUserId,\n          item_id: this.itemId,\n          content: content\n        });\n        if (response.data.ok) {\n          // 发送成功，添加到消息列表\n          this.messages.push(response.data.data);\n          this.messageContent = ''; // 清空输入框\n          this.scrollToBottom(); // 滚动到最新消息\n        } else {\n          alert(response.data.message || '发送失败');\n        }\n      } catch (error) {\n        console.error('发送消息失败:', error);\n        // 模拟发送成功（后端接口未实现时）\n        this.messages.push({\n          id: Date.now(),\n          // 用时间戳作为临时ID\n          sender_id: this.currentUserId,\n          content: content,\n          created_at: new Date().toLocaleString()\n        });\n        this.messageContent = '';\n        this.scrollToBottom();\n      } finally {\n        this.sending = false;\n      }\n    },\n    // 滚动到最新消息\n    scrollToBottom() {\n      const chatContainer = document.querySelector('.card-body[style*=\"height: 500px\"]');\n      if (chatContainer) {\n        chatContainer.scrollTop = chatContainer.scrollHeight;\n      }\n    },\n    // 格式化时间\n    formatTime(timeStr) {\n      return new Date(timeStr).toLocaleTimeString(); // 显示时分秒\n    },\n    // 模拟实时消息监听（实际项目中用WebSocket）\n    setupMessageListener() {\n      // 仅做演示：5秒后模拟收到一条消息\n      setTimeout(() => {\n        if (this.messages.length > 0) {\n          this.messages.push({\n            id: Date.now() + 1,\n            sender_id: this.otherUserId,\n            content: '请问最低多少钱可以出？',\n            created_at: new Date().toLocaleString()\n          });\n          this.scrollToBottom();\n        }\n      }, 5000);\n    }\n  }\n};","map":{"version":3,"names":["axios","data","otherUserId","$route","params","itemId","messages","messageContent","currentUserId","currentUserInfo","otherUserInfo","relatedItem","loading","sending","computed","otherMessages","filter","msg","sender_id","myMessages","created","initUserInfo","getRelatedItem","getHistoryMessages","setupMessageListener","methods","userInfoStr","localStorage","getItem","JSON","parse","id","username","response","get","ok","error","console","title","other_user_id","item_id","alert","content","created_at","scrollToBottom","sendMessage","trim","post","push","message","Date","now","toLocaleString","chatContainer","document","querySelector","scrollTop","scrollHeight","formatTime","timeStr","toLocaleTimeString","setTimeout","length"],"sources":["D:\\21626\\MyFiles\\files\\2025fall\\SE\\Vue_2\\frontend\\src\\views\\ChatDetail.vue"],"sourcesContent":["<template>\n  <div class=\"container mt-4\">\n    <!-- 聊天头部（显示对方信息和商品） -->\n    <div class=\"card mb-3\">\n      <div class=\"card-body d-flex align-items-center gap-3\">\n        <!-- 返回返回按钮 -->\n        <button class=\"btn btn-outline-secondary\" @click=\"$router.go(-1)\">\n          <i class=\"bi bi-arrow-left\"></i>\n        </button>\n        \n        <!-- 对方头像和名称 -->\n        <div class=\"avatar bg-primary text-white rounded-circle d-flex align-items-center justify-content-center\" style=\"width: 40px; height: 40px;\">\n          {{ otherUserInfo.username?.charAt(0).toUpperCase() }}\n        </div>\n        <div>\n          <h5 class=\"mb-0\">{{ otherUserInfo.username }}</h5>\n          <small class=\"text-muted\">\n            商品：<router-link :to=\"`/item/${itemId}`\">{{ relatedItem.title || '未知商品' }}</router-link>\n          </small>\n        </div>\n      </div>\n    </div>\n\n    <!-- 聊天消息区域 -->\n    <div class=\"card mb-3\" style=\"height: 500px; overflow-y: auto;\">\n      <div class=\"card-body p-4\">\n        <!-- 消息列表 -->\n        <div class=\"d-flex flex-column gap-3\">\n          <!-- 对方发送的消息（循环过滤后的数组） -->\n          <div class=\"d-flex align-items-end gap-2\" v-for=\"msg in otherMessages\" :key=\"msg.id\">\n            <div class=\"avatar bg-primary text-white rounded-circle d-flex align-items-center justify-content-center\" style=\"width: 30px; height: 30px; flex-shrink: 0;\">\n              {{ otherUserInfo.username?.charAt(0).toUpperCase() }}\n            </div>\n            <div>\n              <div class=\"bg-light p-2 rounded rounded-start-0 max-width-50\">\n                {{ msg.content }}\n              </div>\n              <small class=\"text-muted ms-2\">{{ formatTime(msg.created_at) }}</small>\n            </div>\n          </div>\n\n          <!-- 自己发送的消息（循环过滤后的数组） -->\n          <div class=\"d-flex align-items-end justify-content-end gap-2\" v-for=\"msg in myMessages\" :key=\"msg.id\">\n            <div class=\"text-end\">\n              <div class=\"bg-primary text-white p-2 rounded rounded-end-0 max-width-50\">\n                {{ msg.content }}\n              </div>\n              <small class=\"text-muted me-2\">{{ formatTime(msg.created_at) }}</small>\n            </div>\n            <div class=\"avatar bg-secondary text-white rounded-circle d-flex align-items-center justify-content-center\" style=\"width: 30px; height: 30px; flex-shrink: 0;\">\n              {{ currentUserInfo.username?.charAt(0).toUpperCase() }}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- 消息输入区域 -->\n    <div class=\"card\">\n      <div class=\"card-body p-3\">\n        <form @submit.prevent=\"sendMessage\" class=\"d-flex gap-2\">\n          <textarea \n            class=\"form-control\" \n            v-model=\"messageContent\" \n            placeholder=\"输入消息...\"\n            rows=\"2\"\n            :disabled=\"sending\"\n          ></textarea>\n          <button \n            type=\"submit\" \n            class=\"btn btn-primary\" \n            :disabled=\"!messageContent.trim() || sending\"\n            style=\"white-space: nowrap;\"\n          >\n            <span v-if=\"sending\" class=\"spinner-border spinner-border-sm me-1\"></span>\n            发送\n          </button>\n        </form>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\n\nexport default {\n  data() {\n    return {\n      // 路由参数\n      otherUserId: this.$route.params.otherUserId, // 聊天对象ID\n      itemId: this.$route.params.itemId,           // 关联商品ID\n\n      // 数据\n      messages: [],               // 消息列表（原始数据）\n      messageContent: '',         // 输入的消息内容\n      currentUserId: null,        // 当前登录用户ID\n      currentUserInfo: {},        // 当前用户信息\n      otherUserInfo: {},          // 聊天对象信息\n      relatedItem: {},            // 关联商品信息\n\n      // 状态\n      loading: true,\n      sending: false              // 发送中状态\n    }\n  },\n  computed: {\n    // 计算属性：过滤对方发送的消息\n    otherMessages() {\n      return this.messages.filter(msg => msg.sender_id !== this.currentUserId);\n    },\n    // 计算属性：过滤自己发送的消息\n    myMessages() {\n      return this.messages.filter(msg => msg.sender_id === this.currentUserId);\n    }\n  },\n  created() {\n    // 初始化数据\n    this.initUserInfo();\n    this.getRelatedItem();\n    this.getHistoryMessages();\n\n    // 模拟实时消息监听（实际项目中可用WebSocket）\n    this.setupMessageListener();\n  },\n  methods: {\n    // 初始化用户信息\n    initUserInfo() {\n      const userInfoStr = localStorage.getItem('user_info');\n      if (userInfoStr) {\n        this.currentUserInfo = JSON.parse(userInfoStr);\n        this.currentUserId = this.currentUserInfo.id;\n      }\n\n      // 临时模拟聊天对象信息（实际应从接口获取）\n      this.otherUserInfo = {\n        username: `用户${this.otherUserId}` // 模拟用户名\n      };\n    },\n\n    // 获取关联商品信息\n    async getRelatedItem() {\n      try {\n        const response = await axios.get(`/api/items/${this.itemId}`);\n        if (response.data.ok) {\n          this.relatedItem = response.data.data;\n        }\n      } catch (error) {\n        console.error('获取关联商品失败:', error);\n        this.relatedItem = { title: `商品${this.itemId}` }; // 模拟商品名\n      }\n    },\n\n    // 获取历史消息\n    async getHistoryMessages() {\n      try {\n        const response = await axios.get(`/api/messages/history`, {\n          params: {\n            other_user_id: this.otherUserId,\n            item_id: this.itemId\n          }\n        });\n        if (response.data.ok) {\n          this.messages = response.data.data;\n        } else {\n          alert('获取历史消息失败');\n        }\n      } catch (error) {\n        console.error('获取历史消息失败:', error);\n        // 模拟历史消息\n        this.messages = [\n          {\n            id: 1,\n            sender_id: this.otherUserId,\n            content: '你好，这个商品还在吗？',\n            created_at: '2025-10-28 10:30:00'\n          },\n          {\n            id: 2,\n            sender_id: this.currentUserId,\n            content: '还在的，请问有兴趣吗？',\n            created_at: '2025-10-28 10:35:00'\n          }\n        ];\n      } finally {\n        this.loading = false;\n        this.scrollToBottom(); // 滚动到最新消息\n      }\n    },\n\n    // 发送消息\n    async sendMessage() {\n      const content = this.messageContent.trim();\n      if (!content) return;\n\n      this.sending = true;\n      try {\n        // 调用后端发送消息接口\n        const response = await axios.post('/api/messages/send', {\n          other_user_id: this.otherUserId,\n          item_id: this.itemId,\n          content: content\n        });\n\n        if (response.data.ok) {\n          // 发送成功，添加到消息列表\n          this.messages.push(response.data.data);\n          this.messageContent = ''; // 清空输入框\n          this.scrollToBottom(); // 滚动到最新消息\n        } else {\n          alert(response.data.message || '发送失败');\n        }\n      } catch (error) {\n        console.error('发送消息失败:', error);\n        // 模拟发送成功（后端接口未实现时）\n        this.messages.push({\n          id: Date.now(), // 用时间戳作为临时ID\n          sender_id: this.currentUserId,\n          content: content,\n          created_at: new Date().toLocaleString()\n        });\n        this.messageContent = '';\n        this.scrollToBottom();\n      } finally {\n        this.sending = false;\n      }\n    },\n\n    // 滚动到最新消息\n    scrollToBottom() {\n      const chatContainer = document.querySelector('.card-body[style*=\"height: 500px\"]');\n      if (chatContainer) {\n        chatContainer.scrollTop = chatContainer.scrollHeight;\n      }\n    },\n\n    // 格式化时间\n    formatTime(timeStr) {\n      return new Date(timeStr).toLocaleTimeString(); // 显示时分秒\n    },\n\n    // 模拟实时消息监听（实际项目中用WebSocket）\n    setupMessageListener() {\n      // 仅做演示：5秒后模拟收到一条消息\n      setTimeout(() => {\n        if (this.messages.length > 0) {\n          this.messages.push({\n            id: Date.now() + 1,\n            sender_id: this.otherUserId,\n            content: '请问最低多少钱可以出？',\n            created_at: new Date().toLocaleString()\n          });\n          this.scrollToBottom();\n        }\n      }, 5000);\n    }\n  }\n}\n</script>\n\n<style>\n/* 消息样式优化 */\n.max-width-50 {\n  max-width: 50%;\n}\n\n/* 滚动条美化 */\n.card-body[style*=\"height: 500px\"]::-webkit-scrollbar {\n  width: 6px;\n}\n.card-body[style*=\"height: 500px\"]::-webkit-scrollbar-thumb {\n  background-color: #ccc;\n  border-radius: 3px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}