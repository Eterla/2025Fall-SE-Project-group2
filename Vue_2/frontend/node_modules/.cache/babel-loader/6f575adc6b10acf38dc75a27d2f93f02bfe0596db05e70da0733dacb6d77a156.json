{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      loading: true,\n      // 加载状态\n      userInfo: {},\n      // 用户信息\n      myItems: [] // 我的商品列表\n    };\n  },\n  created() {\n    // 页面加载时获取用户信息和商品列表\n    this.getUserInfo();\n    this.getMyItems();\n  },\n  methods: {\n    // 获取用户信息\n    async getUserInfo() {\n      try {\n        // 从本地存储获取用户信息（登录时保存的）\n        const userInfoStr = localStorage.getItem('user_info');\n        if (userInfoStr) {\n          this.userInfo = JSON.parse(userInfoStr);\n        } else {\n          // 如果本地没有，调用接口获取（实际项目中需要后端接口支持）\n          const response = await axios.get('/api/auth/me');\n          if (response.data.ok) {\n            this.userInfo = response.data.data;\n            localStorage.setItem('user_info', JSON.stringify(this.userInfo)); // 保存到本地\n          }\n        }\n      } catch (error) {\n        console.error('获取用户信息失败:', error);\n        alert('获取用户信息失败，请刷新页面重试');\n      }\n    },\n    // 获取我的商品列表\n    async getMyItems() {\n      try {\n        // 调用后端接口获取当前用户发布的商品\n        const response = await axios.get('/api/items/my');\n        if (response.data.ok) {\n          this.myItems = response.data.data;\n        } else {\n          alert(response.data.message || '获取商品列表失败');\n        }\n      } catch (error) {\n        console.error('获取我的商品失败:', error);\n        // 暂时用模拟数据显示（后端接口未实现时）\n        this.myItems = [{\n          id: 1,\n          title: '我的测试商品1',\n          price: 199,\n          imagePath: 'default.jpg',\n          status: 'available'\n        }, {\n          id: 2,\n          title: '我的测试商品2',\n          price: 299,\n          imagePath: '',\n          status: 'sold'\n        }];\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 编辑个人资料（预留方法）\n    editProfile() {\n      alert('编辑资料功能待实现');\n      // 实际项目中可跳转到编辑页面，或弹出编辑模态框\n    },\n    // 退出登录\n    logout() {\n      if (confirm('确定要退出登录吗？')) {\n        // 清除本地存储的登录信息\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('user_info');\n        // 跳转到登录页\n        this.$router.push('/login');\n        // 刷新页面\n        window.location.reload();\n      }\n    },\n    // 编辑商品（跳转到编辑页面，预留）\n    editItem(itemId) {\n      alert(`编辑商品 ${itemId}（功能待实现）`);\n      // 实际项目中可跳转到编辑页面：this.$router.push(`/edit-item/${itemId}`)\n    },\n    // 改变商品状态（上架/下架）\n    async changeStatus(itemId, currentStatus) {\n      const newStatus = currentStatus === 'available' ? 'sold' : 'available';\n      const actionText = newStatus === 'available' ? '上架' : '下架';\n      if (!confirm(`确定要${actionText}该商品吗？`)) {\n        return;\n      }\n      try {\n        // 调用后端接口修改商品状态\n        const response = await axios.patch(`/api/items/${itemId}/status`, {\n          status: newStatus\n        });\n        if (response.data.ok) {\n          alert(`商品已${actionText}成功`);\n          // 重新获取商品列表\n          this.getMyItems();\n        } else {\n          alert(response.data.message || '操作失败');\n        }\n      } catch (error) {\n        console.error('修改商品状态失败:', error);\n        alert('网络错误，请稍后再试');\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","loading","userInfo","myItems","created","getUserInfo","getMyItems","methods","userInfoStr","localStorage","getItem","JSON","parse","response","get","ok","setItem","stringify","error","console","alert","message","id","title","price","imagePath","status","editProfile","logout","confirm","removeItem","$router","push","window","location","reload","editItem","itemId","changeStatus","currentStatus","newStatus","actionText","patch"],"sources":["D:\\21626\\MyFiles\\files\\2025fall\\SE\\Vue_2\\frontend\\src\\views\\UserCenter.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <!-- 加载中提示 -->\n    <div v-if=\"loading\" class=\"text-center py-5\">\n      <div class=\"spinner-border text-primary\" role=\"status\">\n        <span class=\"visually-hidden\">Loading...</span>\n      </div>\n    </div>\n\n    <div v-if=\"!loading\">\n      <!-- 用户信息卡片 -->\n      <div class=\"card mb-4\">\n        <div class=\"card-header bg-primary text-white\">\n          <h3>个人信息</h3>\n        </div>\n        <div class=\"card-body\">\n          <div class=\"row\">\n            <div class=\"col-md-2\">\n              <!-- 头像（默认用用户名首字母） -->\n              <div class=\"avatar bg-primary text-white rounded-circle d-flex align-items-center justify-content-center fs-3\" style=\"width: 100px; height: 100px;\">\n                {{ userInfo.username.charAt(0).toUpperCase() }}\n              </div>\n            </div>\n            <div class=\"col-md-10\">\n              <h4>{{ userInfo.username }}</h4>\n              <p class=\"text-muted\">注册时间：{{ userInfo.createdAt }}</p>\n              <button class=\"btn btn-outline-primary\" @click=\"editProfile\">编辑资料</button>\n              <button class=\"btn btn-outline-danger ms-2\" @click=\"logout\">退出登录</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- 我的商品列表 -->\n      <div class=\"card\">\n        <div class=\"card-header bg-primary text-white d-flex justify-content-between align-items-center\">\n          <h3>我的商品</h3>\n          <router-link to=\"/publish\" class=\"btn btn-light\">发布新商品</router-link>\n        </div>\n        <div class=\"card-body\">\n          <!-- 没有商品时显示 -->\n          <div v-if=\"myItems.length === 0\" class=\"text-center py-5\">\n            <p class=\"text-muted\">你还没有发布任何商品</p>\n            <router-link to=\"/publish\" class=\"btn btn-primary\">去发布</router-link>\n          </div>\n\n          <!-- 商品列表 -->\n          <div class=\"row\" v-if=\"myItems.length > 0\">\n            <div class=\"col-md-4 mb-4\" v-for=\"item in myItems\" :key=\"item.id\">\n              <div class=\"card item-card\">\n                <img \n                  :src=\"item.imagePath ? `/images/${item.imagePath}` : '/images/default.jpg'\" \n                  class=\"card-img-top item-image\" \n                  :alt=\"item.title\"\n                >\n                <div class=\"card-body\">\n                  <h5 class=\"card-title\">{{ item.title }}</h5>\n                  <p class=\"card-text text-danger font-weight-bold\">¥{{ item.price }}</p>\n                  <p class=\"card-text\">\n                    <span class=\"badge\" :class=\"item.status === 'available' ? 'bg-success' : 'bg-secondary'\">\n                      {{ item.status === 'available' ? '可交易' : '已售出' }}\n                    </span>\n                  </p>\n                  <div class=\"d-flex gap-2\">\n                    <router-link :to=\"`/item/${item.id}`\" class=\"btn btn-outline-primary flex-1\">查看</router-link>\n                    <button class=\"btn btn-outline-warning flex-1\" @click=\"editItem(item.id)\">编辑</button>\n                    <button \n                      class=\"btn btn-outline-danger flex-1\" \n                      @click=\"changeStatus(item.id, item.status)\"\n                    >\n                      {{ item.status === 'available' ? '下架' : '上架' }}\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\n\nexport default {\n  data() {\n    return {\n      loading: true,       // 加载状态\n      userInfo: {},        // 用户信息\n      myItems: []          // 我的商品列表\n    }\n  },\n  created() {\n    // 页面加载时获取用户信息和商品列表\n    this.getUserInfo();\n    this.getMyItems();\n  },\n  methods: {\n    // 获取用户信息\n    async getUserInfo() {\n      try {\n        // 从本地存储获取用户信息（登录时保存的）\n        const userInfoStr = localStorage.getItem('user_info');\n        if (userInfoStr) {\n          this.userInfo = JSON.parse(userInfoStr);\n        } else {\n          // 如果本地没有，调用接口获取（实际项目中需要后端接口支持）\n          const response = await axios.get('/api/auth/me');\n          if (response.data.ok) {\n            this.userInfo = response.data.data;\n            localStorage.setItem('user_info', JSON.stringify(this.userInfo)); // 保存到本地\n          }\n        }\n      } catch (error) {\n        console.error('获取用户信息失败:', error);\n        alert('获取用户信息失败，请刷新页面重试');\n      }\n    },\n\n    // 获取我的商品列表\n    async getMyItems() {\n      try {\n        // 调用后端接口获取当前用户发布的商品\n        const response = await axios.get('/api/items/my');\n        if (response.data.ok) {\n          this.myItems = response.data.data;\n        } else {\n          alert(response.data.message || '获取商品列表失败');\n        }\n      } catch (error) {\n        console.error('获取我的商品失败:', error);\n        // 暂时用模拟数据显示（后端接口未实现时）\n        this.myItems = [\n          {\n            id: 1,\n            title: '我的测试商品1',\n            price: 199,\n            imagePath: 'default.jpg',\n            status: 'available'\n          },\n          {\n            id: 2,\n            title: '我的测试商品2',\n            price: 299,\n            imagePath: '',\n            status: 'sold'\n          }\n        ];\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    // 编辑个人资料（预留方法）\n    editProfile() {\n      alert('编辑资料功能待实现');\n      // 实际项目中可跳转到编辑页面，或弹出编辑模态框\n    },\n\n    // 退出登录\n    logout() {\n      if (confirm('确定要退出登录吗？')) {\n        // 清除本地存储的登录信息\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('user_info');\n        // 跳转到登录页\n        this.$router.push('/login');\n        // 刷新页面\n        window.location.reload();\n      }\n    },\n\n    // 编辑商品（跳转到编辑页面，预留）\n    editItem(itemId) {\n      alert(`编辑商品 ${itemId}（功能待实现）`);\n      // 实际项目中可跳转到编辑页面：this.$router.push(`/edit-item/${itemId}`)\n    },\n\n    // 改变商品状态（上架/下架）\n    async changeStatus(itemId, currentStatus) {\n      const newStatus = currentStatus === 'available' ? 'sold' : 'available';\n      const actionText = newStatus === 'available' ? '上架' : '下架';\n\n      if (!confirm(`确定要${actionText}该商品吗？`)) {\n        return;\n      }\n\n      try {\n        // 调用后端接口修改商品状态\n        const response = await axios.patch(`/api/items/${itemId}/status`, {\n          status: newStatus\n        });\n\n        if (response.data.ok) {\n          alert(`商品已${actionText}成功`);\n          // 重新获取商品列表\n          this.getMyItems();\n        } else {\n          alert(response.data.message || '操作失败');\n        }\n      } catch (error) {\n        console.error('修改商品状态失败:', error);\n        alert('网络错误，请稍后再试');\n      }\n    }\n  }\n}\n</script>\n\n<style>\n/* 头像样式 */\n.avatar {\n  font-weight: bold;\n}\n</style>"],"mappings":"AAoFA,OAAOA,KAAI,MAAO,OAAM;AAExB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,IAAI;MAAQ;MACrBC,QAAQ,EAAE,CAAC,CAAC;MAAS;MACrBC,OAAO,EAAE,EAAC,CAAW;IACvB;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACC,WAAW,CAAC,CAAC;IAClB,IAAI,CAACC,UAAU,CAAC,CAAC;EACnB,CAAC;EACDC,OAAO,EAAE;IACP;IACA,MAAMF,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF;QACA,MAAMG,WAAU,GAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;QACrD,IAAIF,WAAW,EAAE;UACf,IAAI,CAACN,QAAO,GAAIS,IAAI,CAACC,KAAK,CAACJ,WAAW,CAAC;QACzC,OAAO;UACL;UACA,MAAMK,QAAO,GAAI,MAAMd,KAAK,CAACe,GAAG,CAAC,cAAc,CAAC;UAChD,IAAID,QAAQ,CAACb,IAAI,CAACe,EAAE,EAAE;YACpB,IAAI,CAACb,QAAO,GAAIW,QAAQ,CAACb,IAAI,CAACA,IAAI;YAClCS,YAAY,CAACO,OAAO,CAAC,WAAW,EAAEL,IAAI,CAACM,SAAS,CAAC,IAAI,CAACf,QAAQ,CAAC,CAAC,EAAE;UACpE;QACF;MACF,EAAE,OAAOgB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;QACjCE,KAAK,CAAC,kBAAkB,CAAC;MAC3B;IACF,CAAC;IAED;IACA,MAAMd,UAAUA,CAAA,EAAG;MACjB,IAAI;QACF;QACA,MAAMO,QAAO,GAAI,MAAMd,KAAK,CAACe,GAAG,CAAC,eAAe,CAAC;QACjD,IAAID,QAAQ,CAACb,IAAI,CAACe,EAAE,EAAE;UACpB,IAAI,CAACZ,OAAM,GAAIU,QAAQ,CAACb,IAAI,CAACA,IAAI;QACnC,OAAO;UACLoB,KAAK,CAACP,QAAQ,CAACb,IAAI,CAACqB,OAAM,IAAK,UAAU,CAAC;QAC5C;MACF,EAAE,OAAOH,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;QACjC;QACA,IAAI,CAACf,OAAM,GAAI,CACb;UACEmB,EAAE,EAAE,CAAC;UACLC,KAAK,EAAE,SAAS;UAChBC,KAAK,EAAE,GAAG;UACVC,SAAS,EAAE,aAAa;UACxBC,MAAM,EAAE;QACV,CAAC,EACD;UACEJ,EAAE,EAAE,CAAC;UACLC,KAAK,EAAE,SAAS;UAChBC,KAAK,EAAE,GAAG;UACVC,SAAS,EAAE,EAAE;UACbC,MAAM,EAAE;QACV,EACD;MACH,UAAU;QACR,IAAI,CAACzB,OAAM,GAAI,KAAK;MACtB;IACF,CAAC;IAED;IACA0B,WAAWA,CAAA,EAAG;MACZP,KAAK,CAAC,WAAW,CAAC;MAClB;IACF,CAAC;IAED;IACAQ,MAAMA,CAAA,EAAG;MACP,IAAIC,OAAO,CAAC,WAAW,CAAC,EAAE;QACxB;QACApB,YAAY,CAACqB,UAAU,CAAC,cAAc,CAAC;QACvCrB,YAAY,CAACqB,UAAU,CAAC,WAAW,CAAC;QACpC;QACA,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;QAC3B;QACAC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;MAC1B;IACF,CAAC;IAED;IACAC,QAAQA,CAACC,MAAM,EAAE;MACfjB,KAAK,CAAC,QAAQiB,MAAM,SAAS,CAAC;MAC9B;IACF,CAAC;IAED;IACA,MAAMC,YAAYA,CAACD,MAAM,EAAEE,aAAa,EAAE;MACxC,MAAMC,SAAQ,GAAID,aAAY,KAAM,WAAU,GAAI,MAAK,GAAI,WAAW;MACtE,MAAME,UAAS,GAAID,SAAQ,KAAM,WAAU,GAAI,IAAG,GAAI,IAAI;MAE1D,IAAI,CAACX,OAAO,CAAC,MAAMY,UAAU,OAAO,CAAC,EAAE;QACrC;MACF;MAEA,IAAI;QACF;QACA,MAAM5B,QAAO,GAAI,MAAMd,KAAK,CAAC2C,KAAK,CAAC,cAAcL,MAAM,SAAS,EAAE;UAChEX,MAAM,EAAEc;QACV,CAAC,CAAC;QAEF,IAAI3B,QAAQ,CAACb,IAAI,CAACe,EAAE,EAAE;UACpBK,KAAK,CAAC,MAAMqB,UAAU,IAAI,CAAC;UAC3B;UACA,IAAI,CAACnC,UAAU,CAAC,CAAC;QACnB,OAAO;UACLc,KAAK,CAACP,QAAQ,CAACb,IAAI,CAACqB,OAAM,IAAK,MAAM,CAAC;QACxC;MACF,EAAE,OAAOH,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;QACjCE,KAAK,CAAC,YAAY,CAAC;MACrB;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}