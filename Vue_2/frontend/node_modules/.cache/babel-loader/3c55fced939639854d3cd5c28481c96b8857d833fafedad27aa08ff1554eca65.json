{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      loading: true,\n      // 加载状态\n      conversations: [] // 消息会话列表\n    };\n  },\n  created() {\n    // 页面加载时获取消息列表\n    this.getConversations();\n  },\n  methods: {\n    // 获取消息会话列表\n    async getConversations() {\n      try {\n        // 调用后端接口获取消息列表\n        const response = await axios.get('/api/messages/conversations');\n        if (response.data.ok) {\n          this.conversations = response.data.data;\n        } else {\n          alert(response.data.message || '获取消息列表失败');\n        }\n      } catch (error) {\n        console.error('获取消息列表失败:', error);\n        // 后端接口未实现时，用模拟数据显示\n        this.conversations = [{\n          other_user_id: 2,\n          other_username: '卖家A',\n          last_item_id: 1,\n          // 最后一条消息关联的商品ID\n          last_time: '2025-10-28 10:30',\n          last_sender: 'other',\n          // 最后一条消息发送者（me/other）\n          last_content: '这个商品还在吗？',\n          unread_count: 1 // 未读消息数量\n        }, {\n          other_user_id: 3,\n          other_username: '买家B',\n          last_item_id: 2,\n          last_time: '2025-10-27 16:45',\n          last_sender: 'me',\n          last_content: '最低200元出，不议价',\n          unread_count: 0\n        }];\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 格式化时间（简化版）\n    formatTime(timeStr) {\n      // 实际项目中可根据需要格式化（如：今天/昨天/具体日期）\n      return timeStr;\n    },\n    // 进入与该用户的聊天界面\n    goToChat(otherUserId, itemId) {\n      this.$router.push({\n        name: 'ChatDetail',\n        params: {\n          otherUserId: otherUserId,\n          itemId: itemId\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","loading","conversations","created","getConversations","methods","response","get","ok","alert","message","error","console","other_user_id","other_username","last_item_id","last_time","last_sender","last_content","unread_count","formatTime","timeStr","goToChat","otherUserId","itemId","$router","push","name","params"],"sources":["D:\\21626\\MyFiles\\files\\2025fall\\SE\\Vue_2\\frontend\\src\\views\\Messages.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <!-- 加载中提示 -->\n    <div v-if=\"loading\" class=\"text-center py-5\">\n      <div class=\"spinner-border text-primary\" role=\"status\">\n        <span class=\"visually-hidden\">Loading...</span>\n      </div>\n    </div>\n\n    <!-- 页面标题 -->\n    <h2 class=\"my-4\">我的消息</h2>\n\n    <!-- 没有消息时显示 -->\n    <div v-if=\"!loading && conversations.length === 0\" class=\"text-center py-5\">\n      <p class=\"text-muted\">你还没有任何消息</p>\n      <router-link to=\"/\" class=\"btn btn-primary\">去逛逛</router-link>\n    </div>\n\n    <!-- 消息列表 -->\n    <div class=\"list-group\" v-if=\"!loading && conversations.length > 0\">\n      <!-- 单个聊天会话 -->\n      <div \n        class=\"list-group-item list-group-item-action d-flex gap-3 p-3 cursor-pointer\"\n        v-for=\"conv in conversations\" \n        :key=\"conv.other_user_id\"\n        @click=\"goToChat(conv.other_user_id, conv.last_item_id)\"\n      >\n        <!-- 对方头像（用用户名首字母） -->\n        <div class=\"avatar bg-primary text-white rounded-circle d-flex align-items-center justify-content-center\" style=\"width: 50px; height: 50px; flex-shrink: 0;\">\n          {{ conv.other_username.charAt(0).toUpperCase() }}\n        </div>\n\n        <!-- 消息内容 -->\n        <div class=\"flex-grow-1 min-w-0\">\n          <div class=\"d-flex justify-content-between align-items-center mb-1\">\n            <h6 class=\"mb-0\">{{ conv.other_username }}</h6>\n            <small class=\"text-muted\">{{ formatTime(conv.last_time) }}</small>\n          </div>\n          <p class=\"mb-0 text-truncate\">\n            {{ conv.last_sender === 'me' ? '我：' : '' }}{{ conv.last_content }}\n          </p>\n        </div>\n\n        <!-- 未读消息提示 -->\n        <span v-if=\"conv.unread_count > 0\" class=\"badge bg-danger align-self-start\">\n          {{ conv.unread_count }}\n        </span>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\n\nexport default {\n  data() {\n    return {\n      loading: true,               // 加载状态\n      conversations: []            // 消息会话列表\n    }\n  },\n  created() {\n    // 页面加载时获取消息列表\n    this.getConversations();\n  },\n  methods: {\n    // 获取消息会话列表\n    async getConversations() {\n      try {\n        // 调用后端接口获取消息列表\n        const response = await axios.get('/api/messages/conversations');\n        if (response.data.ok) {\n          this.conversations = response.data.data;\n        } else {\n          alert(response.data.message || '获取消息列表失败');\n        }\n      } catch (error) {\n        console.error('获取消息列表失败:', error);\n        // 后端接口未实现时，用模拟数据显示\n        this.conversations = [\n          {\n            other_user_id: 2,\n            other_username: '卖家A',\n            last_item_id: 1, // 最后一条消息关联的商品ID\n            last_time: '2025-10-28 10:30',\n            last_sender: 'other', // 最后一条消息发送者（me/other）\n            last_content: '这个商品还在吗？',\n            unread_count: 1 // 未读消息数量\n          },\n          {\n            other_user_id: 3,\n            other_username: '买家B',\n            last_item_id: 2,\n            last_time: '2025-10-27 16:45',\n            last_sender: 'me',\n            last_content: '最低200元出，不议价',\n            unread_count: 0\n          }\n        ];\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    // 格式化时间（简化版）\n    formatTime(timeStr) {\n      // 实际项目中可根据需要格式化（如：今天/昨天/具体日期）\n      return timeStr;\n    },\n\n    // 进入与该用户的聊天界面\n    goToChat(otherUserId, itemId) {\n      this.$router.push({\n        name: 'ChatDetail',\n        params: {\n          otherUserId: otherUserId,\n          itemId: itemId\n        }\n      });\n    }\n  }\n}\n</script>\n\n<style>\n/* 头像样式 */\n.avatar {\n  font-weight: bold;\n}\n\n/* 消息列表项悬停效果 */\n.list-group-item:hover {\n  background-color: #f8f9fa;\n}\n</style>"],"mappings":"AAqDA,OAAOA,KAAI,MAAO,OAAM;AAExB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,IAAI;MAAgB;MAC7BC,aAAa,EAAE,EAAC,CAAa;IAC/B;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACC,gBAAgB,CAAC,CAAC;EACzB,CAAC;EACDC,OAAO,EAAE;IACP;IACA,MAAMD,gBAAgBA,CAAA,EAAG;MACvB,IAAI;QACF;QACA,MAAME,QAAO,GAAI,MAAMP,KAAK,CAACQ,GAAG,CAAC,6BAA6B,CAAC;QAC/D,IAAID,QAAQ,CAACN,IAAI,CAACQ,EAAE,EAAE;UACpB,IAAI,CAACN,aAAY,GAAII,QAAQ,CAACN,IAAI,CAACA,IAAI;QACzC,OAAO;UACLS,KAAK,CAACH,QAAQ,CAACN,IAAI,CAACU,OAAM,IAAK,UAAU,CAAC;QAC5C;MACF,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;QACjC;QACA,IAAI,CAACT,aAAY,GAAI,CACnB;UACEW,aAAa,EAAE,CAAC;UAChBC,cAAc,EAAE,KAAK;UACrBC,YAAY,EAAE,CAAC;UAAE;UACjBC,SAAS,EAAE,kBAAkB;UAC7BC,WAAW,EAAE,OAAO;UAAE;UACtBC,YAAY,EAAE,UAAU;UACxBC,YAAY,EAAE,EAAE;QAClB,CAAC,EACD;UACEN,aAAa,EAAE,CAAC;UAChBC,cAAc,EAAE,KAAK;UACrBC,YAAY,EAAE,CAAC;UACfC,SAAS,EAAE,kBAAkB;UAC7BC,WAAW,EAAE,IAAI;UACjBC,YAAY,EAAE,aAAa;UAC3BC,YAAY,EAAE;QAChB,EACD;MACH,UAAU;QACR,IAAI,CAAClB,OAAM,GAAI,KAAK;MACtB;IACF,CAAC;IAED;IACAmB,UAAUA,CAACC,OAAO,EAAE;MAClB;MACA,OAAOA,OAAO;IAChB,CAAC;IAED;IACAC,QAAQA,CAACC,WAAW,EAAEC,MAAM,EAAE;MAC5B,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC;QAChBC,IAAI,EAAE,YAAY;QAClBC,MAAM,EAAE;UACNL,WAAW,EAAEA,WAAW;UACxBC,MAAM,EAAEA;QACV;MACF,CAAC,CAAC;IACJ;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}